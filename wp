#! /run/current-system/sw/bin/scsh \
-o srfi-27 -e main -s
!#

;; The custom directory to use
(define *directory* #f)

;; The default directory to get images from
(define *base-directory*
  (string-append home-directory "/Pictures/"))

;; List of directories for --random use
(define *directories*
  (list *base-directory*))

;; Directories that wp shouldn't look at
(define *exclude-dirs*
  '("oops"))

;; File extensions that wp shouldn't care about
(define *exclude-exts*
  '("gpg" "xcf" "psd"))

;; Default flags
(define *base-flags* '())

;; Extra flags
(define *extra-flags* '())

;; Default timeout for --random
(define *timeout* #f)

;; Help variable knob
(define *help* #f)

;; Random variable knob
(define *random* #f)

;; Commandâ€”arguments alist
(define *command-flags-alist*
  '((hsetroot   . ("-fill"))
    (xv         . ("-root" "-quit" "-geometry"))
    (xsetbg     . ("-fullscreen"))
    (bsetbg     . ("-full"))
    (fbsetbg    . ("-f"))
    (wmsetbg    . ("--maxscale"))
    (Esetroot   . ("-scale" "-fit"))))

;; Custom command to set wallpaper
(define *command* #f)

;; Detected screen dimensions
(define *screen-resolution*
  (run/strings
   (pipe (xdpyinfo)
         (grep "dimensions:")
         (awk "{print $2}"))))

;; List of commands for help usage
(define *command-list*
  '(hsetroot
    xv
    xsetbg
    bsetbg
    fbsetbg
    wmsetbg))

;; Get options and arguments for a wallpaper setter
(define (get-command)
  (let* ((command (call-with-current-continuation
                   (lambda (break)
                     (for-each (lambda (cmd)
                                 (let* ((command-string (symbol->string cmd))
                                        (command (run/strings (which ,command-string))))
                                   (if (not (null? command))
                                       (break command-string))))
                               *command-list*)
                     (format #t "Error: command not found~%~%")
                     (format #t "Please install any of the following to continue:~%")
                     (for-each (lambda (cmd)
                                 (format #t "~A~%" cmd))
                               *command-list*)
                     (exit 1))))
         (args (cdr (assoc (string->symbol command)
                           *command-flags-alist*))))
    (cons command args)))

;; Get command output
(define (get-command-line binary tail)
  (cons binary
        (append (cdr (assoc (string->symbol binary)
                            *command-flags-alist*))
                tail)))

;; Run a wallpaper setter
(define (set-command)
  (let* ((command (get-command))
         (binary (car command)))
    (case (string->symbol binary)
      ((xv)
       (set! *command*
             (get-command-line binary *screen-resolution*)))
      (else (set! *command*
                  (get-command-line binary '()))))
    (set! *command*
          (map (lambda (item)
                 (string-append
                  (cond ((number? item) (number->string item))
                        ((symbol? item) (symbol->string item))
                        ((string? item) item))
                  ""))
               *command*))))

;; Get list of setters
(define (get-binaries)
  (set-command)
  (list (car *command*)))

;; Get list of setters
(define *binaries* (get-binaries))

;; Check for existence of setters
(define (check-binaries)
  (let ((missing #f))
    (for-each (lambda (binary)
                (let ((path (run/strings (which ,binary))))
                  (if (null? path)
                      (begin (set! missing #t)
                             (format #t "~A: command not found~%" binary)))))
              *binaries*)
    (if missing
        (begin (format #t "~%Some required programs cannot be located in your PATH.~%")
               (format #t "Please install required programs to continue.~%")
               (exit 1)))))

;; Check for existence of image directories
(define (check-directories)
  (if (and (file-exists? *base-directory*)
           (or (file-directory? *base-directory*)
               (and (file-symlink? *base-directory*)
                    (file-directory? (read-symlink *base-directory*)))))
      (let ((file-count (length
                         (directory-files *base-directory*))))
        (if (null? file-count)
            (begin (format #t "Error: ~A is empty.~%")
                   (exit 1))))
      (begin (format #t "Error: ~A does not exist.~%"
                     *base-directory*))))

;; Pre-set checks
(define (pre-run)
  (check-binaries)
  (check-directories))

;; Display help usage
(define (display-usage args)
  (let ((self (file-name-nondirectory (car args))))
    (format #t
            "Usage: ~a [OPTION]... <IMAGE>

Options:
-h, --help              Show this help
-r, --random            Use a random image
-d, --directory dir     Specify directory for `--random'
-t, --timeout secs      Set timeout before next redisplay
-f, --force command     Use command instead of the default ~A

See https://github.com/ebzzry/wp for more information
" self *command*)))

;; Parse command-line arguments
(define (parse-arguments args)
  (cond ((null? args) args)
        (else (case (string->symbol (car args))
                ((-h --help)
                 (set! *help* #t)
                 (parse-arguments (cdr args)))
                ((-r --random)
                 (set! *random* #t)
                 (parse-arguments (cdr args)))
                ((-d --directory)
                 (set! *random* #t)
                 (set! *directory*
                       (file-name-as-directory
                        (cadr args)))
                 (parse-arguments (cddr args)))
                ((-t --timeout)
                 (set! *random* #t)
                 (set! *timeout* (cadr args))
                 (parse-arguments (cddr args)))
                ((-f --force)
                 (set! *command* (cadr args))
                 (parse-arguments (cddr args)))
                ((-v --verbose)
                 (set! *verbose* #t)
                 (parse-arguments (cdr args)))
                (else args)))))

;; Filter directory contents using exclusions
(define (filter-directory directory)
  (let ((files (directory-files directory)))

    ;; Exclude items in *exclude-dirs*
    (do ((ex *exclude-dirs* (cdr ex)))
        ((null? ex) files)
      (set! files (remove (lambda (file)
                            (string=? file (car ex)))
                          files)))

    ;; Exclude items in *exclude-exts*
    (do ((ex *exclude-exts* (cdr ex)))
        ((null? ex) files)
      (set! files (remove (lambda (file)
                            (string=? (file-name-extension file)
                                      (string-append
                                       "." (car ex))))
                          files)))
    files))

;; Get random directory inside *directory*
(define (get-random-directory)
  (random-source-randomize! default-random-source)
  (let* ((count (length *directories*))
         (item (random-integer count))
         (directory (list-ref *directories*
                              item))
         (contents (directory-files directory)))
    (if (null? (directory-files directory))
        (get-random-directory))
    (if (or (= (length contents) 0)
            (not (file-exists? directory))
            (not (file-directory? directory)))
        (get-random-directory)
        (if (and (file-exists? directory)
                 (file-directory? directory))
            directory))))

;; Get random image inside *directory*
(define (get-random-image directory)
  (random-source-randomize! default-random-source)
  (let ((files (filter-directory directory)))
    (if (null? files)
        (get-random-image (get-random-directory))
        (let* ((ref (random-integer (length files)))
               (file (list-ref files ref))
               (path (string-append directory file)))
          (if (file-directory? path)
              (get-random-image (file-name-as-directory path))
              path)))))

;; Set the wallpaper
(define (set-wallpaper flags image)
  (if (file-exists? image)
      (run (,@*command* ,@flags ,image))))

;; Set random wallpaper
(define (set-wallpaper-random flags directory . count)
  (set-wallpaper flags (get-random-image directory))
  (if (> (string-length (car count)) 0)
      (let ((timeout (string->number (car count))))
        (begin (process-sleep timeout)
               (set-wallpaper-random flags directory
                                     (number->string timeout))))))

;; Returns true if a directory is empty
(define (directory-empty? directory)
  (if (null? (directory-files directory))
      #t
      #f))

;; Top-level
(define (main args)
  (pre-run)
  (if (not (null? (cdr args)))
      (let ((file (parse-arguments (cdr args)))
            (flags (append *base-flags* *extra-flags*)))
        (cond (*help*
               (display-usage args)
               (exit 0))
              (*random*
               (set-wallpaper-random flags
                                     (or *directory* (get-random-directory))
                                     (or *timeout* "")))
              (else
               (set-wallpaper flags (resolve-file-name (car file))))))
      (display-usage args)))


